extends r

snippet #! "Hashbang for Rscript"
#!/usr/bin/env Rscript
endsnippet

snippet fun "Function"
${1:name} <- function(${2:parameters}) {
    ${0}
}
endsnippet

snippet lib "library"
library(${0})
endsnippet

snippet if 
if (${1:condition}) {
    ${0}
}
endsnippet

snippet elif
else if {${1:condition}} {
    ${0}
}
endsnippet

snippet trib
${1:varname} <- tribble(
    ${0})
endsnippet

snippet rpar
#' @param ${0}
endsnippet

snippet rexp
#' @export${0}
endsnippet

snippet udconv
udunits2::ud.convert(${1}, "${2}", "${3}")
endsnippet

snippet ##- "knitr chunk"
## ---- ${1} ----------
${0}
endsnippet

snippet loglog
PEcAn.logger::logger.${0}
endsnippet

snippet logdebug
PEcAn.logger::logger.debug(${0})
endsnippet

snippet loginfo
PEcAn.logger::logger.info(${0})
endsnippet

snippet logwarn
PEcAn.logger::logger.warn(${0})
endsnippet

snippet logerr
PEcAn.logger::logger.error(${0})
endsnippet

snippet logsev
PEcAn.logger::logger.severe(${0})
endsnippet

snippet logger
PEcAn.logger::
endsnippet

snippet assthat
assertthat::assert_that(${0})
endsnippet

snippet import
import::from("${1}", "${0}")
endsnippet

# Tidyverse functions
snippet select
dplyr::select
endsnippet

snippet filter
dplyr::filter
endsnippet

snippet mutate
dplyr::mutate
endsnippet

snippet tibble
tibble::tibble
endsnippet

snippet group
dplyr::group_by
endsnippet

snippet gather
tidyr::gather
endsnippet

snippet separate
tidyr::separate
endsnippet

snippet map
purrr::map
endsnippet

snippet lmap
purrr::lmap
endsnippet

snippet pmap
purrr::pmap
endsnippet

snippet read_csv
readr::read_csv
endsnippet

snippet rtm
PEcAnRTM
endsnippet
